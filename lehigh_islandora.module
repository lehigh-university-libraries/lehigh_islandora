<?php

/**
 * @file
 * Contains lehigh_islandora.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function lehigh_islandora_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the lehigh_islandora module.
    case 'help.page.lehigh_islandora':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_xmlsitemap_link_alter().
 */
function lehigh_islandora_xmlsitemap_link_alter(array &$link, array $context) {
  $uri = $link['loc'];
  if (substr($uri, 0, 6) == '/node/') {
    $components = explode('/', $uri);
    $nid = array_pop($components);
    $node = Node::load($nid);

    // Do not add pages to the sitemap.
    if ($node
      && $node->hasField('field_model')
      && !$node->field_model->isEmpty()
      && $node->field_model->entity->hasField('field_external_uri')
      && !$node->field_model->entity->field_external_uri->isEmpty()
      && $node->field_model->entity->field_external_uri->uri == 'http://id.loc.gov/ontologies/bibframe/part') {
      $link['status'] = 0;
      $link['access'] = 0;
    }
  }
}


/**
 * Implements hook_pathauto_pattern_alter().
 */
function lehigh_islandora_pathauto_pattern_alter($pattern, array $context) {
  if (!empty($context['data']['node'])) {
    $node = $context['data']['node'];

    // Do not create aliases for pages.
    if ($node
      && $node->hasField('field_model')
      && !$node->field_model->isEmpty()
      && $node->field_model->entity->hasField('field_external_uri')
      && !$node->field_model->entity->field_external_uri->isEmpty()
      && $node->field_model->entity->field_external_uri->uri == 'http://id.loc.gov/ontologies/bibframe/part') {
      $pattern->setPattern('');
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function lehigh_islandora_pathauto_alias_alter(&$alias, array &$context) {
  if (!empty($context['data']['node'])) {
    $node = $context['data']['node'];

    if (lehigh_site_support_identify_collection($node)) {
      $context['source'] = '/browse-items/' . $node->id();
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function lehigh_islandora_theme_registry_alter(array &$theme_registry) {
  if (empty($theme_registry['media'])) {
    return;
  }

  $module_path = \Drupal::service('extension.list.module')->getPath('lehigh_islandora');
  $theme_registry['media__image__rest_url'] = $theme_registry['media'];
  $theme_registry['media__image__rest_url']['template'] = 'media--image--rest-url';
  $theme_registry['media__image__rest_url']['path'] = $module_path . '/templates';

  $theme_registry['node_edit_form']['template'] = 'node-edit-form';
  $theme_registry['node_edit_form']['path'] = $module_path . '/templates';
}

/**
 * Implements hook_metatags_attachments_alter().
 */
function lehigh_islandora_metatags_attachments_alter(array &$metatag_attachments) {
  // See if the node, or one of the parents in the hierarchy,
  // have google scholar metatags set to be hidden.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node && is_object($node) && $node->bundle() === 'islandora_object') {
    $depth = 0;
    while ($depth < 10 && $node->hasField('field_hide_gscholar_metatags')) {
      if (!$node->field_hide_gscholar_metatags->isEmpty()
        && $node->field_hide_gscholar_metatags->value) {
        // Metatags should be hidden for google scholar.
        foreach ($metatag_attachments['#attached']['html_head'] as $id => $attachment) {
          if (substr($attachment[1], 0, 9) == 'citation_') {
            unset($metatag_attachments['#attached']['html_head'][$id]);
          }
        }
        break;
      }

      // Avoid circular references causing infinite loops.
      ++$depth;

      // @todo use recursion for multi-valued field_member_of
      // right now that isn't a thing here at Lehigh.
      if ($node->hasField('field_member_of') && !$node->field_member_of->isEmpty()) {
        $node = $node->field_member_of->entity;
      }
      else {
        break;
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function lehigh_islandora_media_insert(EntityInterface $media) {
  if ($media->bundle() == 'image' &&
    !$media->field_media_use->isEmpty() &&
    !$media->field_media_of->isEmpty() &&
    !is_null($media->field_media_of->entity) &&
    !is_null($media->field_media_of->entity) &&
    $media->field_media_use->entity->label() == 'Thumbnail Image') {
    $node = Node::load($media->field_media_of->entity->id());
    if ($node) {
      $node->set('field_thumbnail', $media->id());
      $node->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function lehigh_islandora_node_insert(EntityInterface $entity) {
  lehigh_islandora_clear_disk_cache($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function lehigh_islandora_node_update(EntityInterface $entity) {
  lehigh_islandora_clear_disk_cache($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function lehigh_islandora_node_delete(EntityInterface $entity) {
  lehigh_islandora_clear_disk_cache($entity);
}

function lehigh_islandora_clear_disk_cache(EntityInterface $node) {
  $filesystem = \Drupal::service('file_system');

  // remove cached serialized JSON for workbench exports from disk
  $json_cache = 'private://serialized/node/' . $node->id() . '.json';
  $f = $filesystem->realpath($json_cache);
  if (file_exists($f)) {
    unlink($f);
  }

  // remove cached IIIF manifests from disk
  // for this node and its parent
  $base_dir = $filesystem->realpath('private://iiif');
  $nids = [$node->id()];
  if ($node->hasField('field_member_of')) {
    foreach ($node->field_member_of as $parent) {
      if (is_null($parent->entity)) {
        continue;
      }
      $nids[] = $parent->entity->id();
    }
  }
  foreach ($nids as $nid) {
    $pattern = $base_dir . '/*/node/' . $nid . '/*.*';
    array_map('unlink', glob($pattern));
  }
}

/**
 * Helper function to fetch a taxonomy term by name/vocab.
 */
function lehigh_islandora_get_tid_by_name($name, $vid, $auto_create = FALSE) {
  if ($name == "" || $vid == "") {
    return FALSE;
  }

  static $cache = [];
  $cache_key = $vid . ':' . $name;
  if (isset($cache[$cache_key])) {
    return $cache[$cache_key];
  }

  $tid = \Drupal::database()->query('SELECT tid FROM {taxonomy_term_field_data}
    WHERE name = :name AND vid = :vid', [
    ':vid' => $vid,
    ':name' => $name,
  ])->fetchField();
  if (!$tid && $auto_create) {
    $term = Term::create([
      'vid' => $vid,
      'name' => $name,
    ]);
    $term->save();
    $tid = $term->id();
  }

  $cache[$cache_key] = $tid;

  return $tid;
}

/**
 * Helper function to get the OCFL directory of a fcrepo object ID.
 */
function lehigh_islandora_get_ocfl_dir(string $objectId) : string {
  $digest = hash('sha256', $objectId);
  $tupleSize = 3;
  $numberOfTuples = 3;
  $path = "/fcrepo/";
  for ($i = 0; $i < $numberOfTuples * $tupleSize; $i += $tupleSize) {
    $tuple = substr($digest, $i, $tupleSize);
    $path .= $tuple . "/";
  }

  $path .= $digest;
  return $path;
}


/**
 * Implements hook_views_query_alter().
 */
function lehigh_islandora_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'browse') {
    if (isset($view->args[0])) {
      $arg = (int)$view->args[0];
    }
    else {
      $current_path = \Drupal::service('path.current')->getPath();
      $current_path = ltrim($current_path, '/');
      $path_parts = explode('/', $current_path);
      if (isset($path_parts[1]) && is_numeric($path_parts[1])) {
        $arg = (int)$path_parts[1];
      }
      else {
        $arg = -1;
      }
    }

    // /browse-items/-1 -> all non-collection items
    // /browse-items/0 -> all collections
    // /browse-items/\d+ -> all items in collection
    $field_member_of = $arg ? [$arg] : [1, 2, 185];
    if ($arg == 0) {
      $query->addCondition('field_model', [27821, 23], 'IN');
    }
    elseif ($arg == -1) {
      $query->addCondition('field_model', [27821, 23, 28], 'NOT IN');
    }
    else {
      $query->addCondition('field_model', [28], 'NOT IN');
    }

    if ($field_member_of[0] != -1) {
      $query->addCondition('field_member_of', $field_member_of, 'IN');
    }
  }
}
